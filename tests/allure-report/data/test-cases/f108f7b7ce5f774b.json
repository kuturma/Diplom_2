{"uid":"f108f7b7ce5f774b","name":"Ошибка, код 302 при заказе без авторизации пользователя, с существующими ингредиентами","fullName":"test_order.TestOrder#test_create_order_without_authorized_user_and_true_ingredient_shows_error","historyId":"b259222033fbdae94de43231c6ea222e","time":{"start":1753259325725,"stop":1753259326014,"duration":289},"status":"failed","statusMessage":"AssertionError: assert (200 == 302)\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_order.TestOrder object at 0x00000279C9FF1690>\nlist_ingredient = ['61c0c5a71d1f82001bdaaa6d', '61c0c5a71d1f82001bdaaa6f', '61c0c5a71d1f82001bdaaa70', '61c0c5a71d1f82001bdaaa71', '61c0c5a71d1f82001bdaaa72', '61c0c5a71d1f82001bdaaa6e', ...]\n\n    @allure.title('Ошибка, код 302 при заказе без авторизации пользователя, с существующими ингредиентами')\n    def test_create_order_without_authorized_user_and_true_ingredient_shows_error(self, list_ingredient):\n    \n        selected_ingredients = random.sample(list_ingredient, k=3)\n        payload = {\"ingredients\": selected_ingredients}\n    \n        with allure.step('Запрос: заказ с существующими ингридиентами, без авторизации'):\n            response = requests.post(TestEndpoint.ORDER, json=payload)\n    \n>       assert (response.status_code == TestData.ORDER_WITHOUT_AUTH[\"code\"] and\n                response.headers[\"location\"] == TestData.ORDER_WITHOUT_AUTH[\"location\"])\nE       assert (200 == 302)\nE        +  where 200 = <Response [200]>.status_code\n\ntest_order.py:36: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"list_ingredient","time":{"start":1753259325352,"stop":1753259325724,"duration":372},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert (200 == 302)\n +  where 200 = <Response [200]>.status_code","statusTrace":"self = <tests.test_order.TestOrder object at 0x00000279C9FF1690>\nlist_ingredient = ['61c0c5a71d1f82001bdaaa6d', '61c0c5a71d1f82001bdaaa6f', '61c0c5a71d1f82001bdaaa70', '61c0c5a71d1f82001bdaaa71', '61c0c5a71d1f82001bdaaa72', '61c0c5a71d1f82001bdaaa6e', ...]\n\n    @allure.title('Ошибка, код 302 при заказе без авторизации пользователя, с существующими ингредиентами')\n    def test_create_order_without_authorized_user_and_true_ingredient_shows_error(self, list_ingredient):\n    \n        selected_ingredients = random.sample(list_ingredient, k=3)\n        payload = {\"ingredients\": selected_ingredients}\n    \n        with allure.step('Запрос: заказ с существующими ингридиентами, без авторизации'):\n            response = requests.post(TestEndpoint.ORDER, json=payload)\n    \n>       assert (response.status_code == TestData.ORDER_WITHOUT_AUTH[\"code\"] and\n                response.headers[\"location\"] == TestData.ORDER_WITHOUT_AUTH[\"location\"])\nE       assert (200 == 302)\nE        +  where 200 = <Response [200]>.status_code\n\ntest_order.py:36: AssertionError","steps":[{"name":"Запрос: заказ с существующими ингридиентами, без авторизации","time":{"start":1753259325725,"stop":1753259326014,"duration":289},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"stepsCount":0,"attachmentStep":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"stepsCount":1,"attachmentStep":false},"afterStages":[],"labels":[{"name":"suite","value":"test_order"},{"name":"subSuite","value":"TestOrder"},{"name":"host","value":"DESKTOP-S2HMQN1"},{"name":"thread","value":"67420-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_order"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[]}],"tags":[]},"source":"f108f7b7ce5f774b.json","parameterValues":[]}